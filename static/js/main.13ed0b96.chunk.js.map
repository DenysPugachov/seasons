{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","winter","text","iconName","iconColor","summer","SeasonDisplay","props","lat","month","season","Date","getMonth","className","lon","Spinner","style","height","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,YACNC,SAAU,YACVC,UAAW,QAEbC,OAAQ,CACNH,KAAM,wBACNC,SAAU,MACVC,UAAW,SAqCAE,EAxBO,SAAAC,GACpB,IAViBC,EAAKC,EAUhBC,GAVWF,EAUQD,EAAMC,KAVTC,GAUc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAID,EAISR,EAAaU,GAA3CR,EAJqB,EAIrBA,KAAMC,EAJe,EAIfA,SAAUC,EAJK,EAILA,UAExB,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,qCACSA,EADT,QACsBR,GAGtB,uBAAGW,UAAS,oBAAeV,EAAf,sBAAqCC,KACjD,uBAAGS,UAAS,qBAAgBV,EAAhB,sBAAsCC,KAElD,wBAAIS,UAAW,eAAf,eAEE,yCAAeN,EAAMC,KACrB,0CAAgBD,EAAMO,QCzCxBC,EAAU,SAAAR,GACd,OACE,yBAAKS,MAAO,CAAEC,OAAQ,SAAWJ,UAAU,cACzC,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMW,YAKnDH,EAAQI,aAAe,CACrBD,QAAS,cAGIH,QCVTK,E,4MACJC,MAAQ,CACNb,IAAK,KACLM,IAAK,KACLQ,aAAc,I,kEAGK,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OACN,EAAKC,UAAS,WACZ,MAAO,CACLpB,IAAKmB,EAASE,OAAOC,SACrBhB,IAAKa,EAASE,OAAOE,iBAG3B,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAAEN,aAAcU,EAAId,e,sCAK3C,OAAIe,KAAKZ,MAAMC,eAAiBW,KAAKZ,MAAMb,IAClC,uCAAcyB,KAAKZ,MAAMC,eAG7BW,KAAKZ,MAAMC,cAAgBW,KAAKZ,MAAMb,IAClC,kBAAC,EAAD,CAAeA,IAAMyB,KAAKZ,MAAMb,IAAMM,IAAMmB,KAAKZ,MAAMP,MAGzD,kBAAC,EAAD,CAASI,QAAQ,wC,+BAIxB,OACE,6BACGe,KAAKC,qB,GAnCIC,IAAMC,WAyCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.13ed0b96.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SeasonDisplay.css\";\n\nconst seasonConfig = {\n  winter: {\n    text: \"It's cold\",\n    iconName: \"snowflake\",\n    iconColor: \"blue\",\n  },\n  summer: {\n    text: \"Let's go to the beach\",\n    iconName: \"sun\",\n    iconColor: \"red\",\n  },\n};\n\nconst getSeason = (lat, month) => {\n  //month 3-8 ?\n  if (month > 2 && month < 9) {\n    return lat < 0 ? \"summer\" : \"winter\";\n  } else {\n    return lat > 0 ? \"winter\" : \"summer\";\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n\n  //use seasonConfig to pass the value\n  const { text, iconName, iconColor } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <h1>\n        It is {season} and {text}\n      </h1>\n\n      <i className={`icon-left ${iconName} icon huge ${iconColor}`}></i>\n      <i className={`icon-right ${iconName} icon huge ${iconColor}`}></i>\n\n      <ul className={\"coordinates\"}>\n        You current:\n        <li>latitude: {props.lat}</li>\n        <li>longitude: {props.lon}</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from \"react\";\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <div style={{ height: \"100vh\" }} className=\"ui segment\">\r\n      <div className=\"ui active dimmer\">\r\n        <div className=\"ui big text loader\">{props.message}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nSpinner.defaultProps = {\r\n  message: \"Loading...\",\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\n\nclass App extends React.Component {\n  state = {\n    lat: null,\n    lon: null,\n    errorMessage: \"\",\n  };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position =>\n        this.setState(() => {\n          return {\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n          };\n        }),\n      err => this.setState({ errorMessage: err.message }),\n    );\n  }\n\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: { this.state.errorMessage }</div>;\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={ this.state.lat } lon={ this.state.lon } />;\n    }\n\n    return <Spinner message=\"Please accept location request...\" />;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderContent() }\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}